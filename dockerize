#!/bin/bash

SCRIPTNAME="dockerize"

ETC_HOSTS=/etc/hosts
IP="0.0.0.0"
PORT=80
PROJECT_PATH=$(eval pwd)
IS_DOCKERIZED=$(eval [ ! -e ${PROJECT_PATH}/.dockerized ]; echo $?)

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

if [ -z $(eval command -v docker) ]; then
	"Docker is not installed"
	exit 1
fi

# Check if is dockerized
if [ ! $IS_DOCKERIZED -eq 0 ]; then
	HOST_NAME=$(cat .dockerized | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["HOST_NAME"]')
	MVERSION=$(cat .dockerized | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["MVERSION"]')
	MAGE_TYPE=$(cat .dockerized | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["MAGE_TYPE"]')
	CONTAINER_NAME="magento${MVERSION}"
fi

# Check if you have the images. If not
if [ "$(docker images -q fsspencer/magento:latest 2> /dev/null)" == "" ]; then
  docker pull fsspencer/magento
fi
if [ "$(docker images -q fsspencer/magento2:latest 2> /dev/null)" == "" ]; then
  docker pull fsspencer/magento2
fi
if [ "$(docker images -q mysql:latest 2> /dev/null)" == "" ]; then
  docker pull mysql
fi

######################################################
####		 Functions
######################################################

function init
 {
 	docker pull fsspencer/magento
 	docker pull fsspencer/magento2
 	docker pull mysql

	if [ ! "$(docker ps -a | grep mysql)" ]; then
		# Create and start container
		docker stop $(docker ps | grep "3306/tcp")
		docker run -d -ti -e MYSQL_ROOT_PASSWORD="root" -p 3306:3306 --name mysql mysql
		MYSQL_ROOT_PASSWORD="root"

		echo -e "${BLUE}Setting up mysql...${NC}"
		sleep 5s

		docker start mysql
		echo -e "Your current MySQL root password is: $MYSQL_ROOT_PASSWORD\n"
	fi

	echo "${GREEN}Installation finished${NC}"
	exit
}

function stop {
	# Stop and Remove existing container
	docker stop $(docker ps -q -a --filter name=magento) &>/dev/null
	docker rm $CONTAINER_NAME &>/dev/null
}

function start {

	docker mysql start

	if [ -z $MVERSION ]; then
		read -p "Magento Version [1 or 2]: " MVERSION
		if [ -z "$MVERSION" ]; then
			MVERSION="2"
			echo "Selected Magento 2";
		fi
	fi

	if [ -z $MAGE_TYPE ]; then
		read -p "Magento Type [ce/ee]: " MAGE_TYPE
		if [ -z "$MAGE_TYPE" ]; then
			MAGE_TYPE="ce"
		fi
		if [ "$MAGE_TYPE" = "ee" ]; then
			REPO_M2="--repository-url=https://repo.magento.com/ magento/project-enterprise-edition"
		else
			REPO_M2="magento/community-edition"
		fi
	fi

	CONTAINER_NAME="magento${MVERSION}"

	if [ -z "$HOST_NAME" ]; then
		read -p "Base URL [dev.local]: " HOST_NAME
		if [ -z "$HOST_NAME" ]; then
			HOST_NAME="dev.local"
		fi
	fi
	BASE_URL=http://${HOST_NAME}/

	stop 

	if [ "$MVERSION" -eq "1" ]; then
		REPO=fsspencer/magento
	else
		REPO=fsspencer/magento2
	fi

	# Create and start container
	echo -e "${BLUE}\n-------------------------------------${NC}"
	echo -e "${BLUE}Container creation response:${NC}"
	echo -e "${BLUE}-------------------------------------${NC}"
	docker run -d --name $CONTAINER_NAME -v $PROJECT_PATH:/var/www/html -p $PORT:80 $REPO
	echo -e "\n"

	# Get container IP Address
	M2_IPADDRESS=$(docker inspect ${CONTAINER_NAME} | python -c 'import json,sys;obj=json.load(sys.stdin);print obj[0]["NetworkSettings"]["IPAddress"]')
}

function createConfigFile {
	echo -e "${BLUE}\nDownloading config file...${NC}"
	if [ "$MVERSION" -eq "2" ]; then
		CONFIG_FILE=$PROJECT_PATH/app/etc/env.php
		curl -k https://raw.githubusercontent.com/fsspencer/dockerize-magento/master/config/m2/${MAGE_TYPE}/env.php > $CONFIG_FILE
	else
		CONFIG_FILE=$PROJECT_PATH/app/etc/local.xml
		curl -k https://raw.githubusercontent.com/fsspencer/dockerize-magento/master/config/m1/local.xml.sample > $CONFIG_FILE
	fi

	echo -e "\n"
	read -p "Crypt [783eee839c0396cf398e07e218e89e0a]: " CRYPT
	if [ -z $CRYPT ]; then
		CRYPT="783eee839c0396cf398e07e218e89e0a"
	fi

	read -p "Backend Frontname [backend]: " BACKEND_FRONTNAME
	if [ -z $BACKEND_FRONTNAME ]; then
		BACKEND_FRONTNAME="backend"
	fi

	sed -i '' "s/CRYPT/${CRYPT}/1" $CONFIG_FILE
	sed -i '' "s/DB_HOST/${DB_IPADDRESS}/1" $CONFIG_FILE
	sed -i '' "s/DB_USER/root/1" $CONFIG_FILE
	sed -i '' "s/DB_PASSWORD/${MYSQL_ROOT_PASSWORD}/1" $CONFIG_FILE
	sed -i '' "s/DB_NAME/${DBNAME}/1" $CONFIG_FILE
	sed -i '' "s/BACKEND_FRONTNAME/backend/1" $CONFIG_FILE
}

function createMysql {
	# Stop and Remove existing container
	echo -e "${BLUE}\n-------------------------------------${NC}"
	echo -e "${BLUE}Mysql container response:${NC}"
	echo -e "${BLUE}-------------------------------------${NC}"
	
	docker start mysql
	echo -e "\n"	
	read -p "Mysql Root Password: " MYSQL_ROOT_PASSWORD

	# Get container IP Address
	DB_IPADDRESS=$(docker inspect mysql | python -c 'import json,sys;obj=json.load(sys.stdin);print obj[0]["NetworkSettings"]["IPAddress"]')
}


function createDatabase {
	docker exec -ti $CONTAINER_NAME mysql -h $DB_IPADDRESS -uroot -proot -e "DROP DATABASE IF EXISTS ${DBNAME}; CREATE DATABASE ${DBNAME};"
}


function importDatabase {
	echo -e "${BLUE}\nImporting sql file into database...${NC}"
	docker exec -ti $CONTAINER_NAME mysql -h $DB_IPADDRESS -uroot -proot -e "set @@global.show_compatibility_56=ON;"
	docker exec -ti $CONTAINER_NAME mysql -h $DB_IPADDRESS -uroot -proot -e "USE ${DBNAME}; SOURCE ${SQLNAME};"
	if [ "$MVERSION" -eq "2" ]; then
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun2.phar config:store:set web/unsecure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun2.phar config:store:set web/secure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun2.phar cache:clean
		
		docker exec --user www-data -ti $CONTAINER_NAME php bin/magento setup:upgrade
		docker exec --user www-data -ti $CONTAINER_NAME php bin/magento cache:clean
	else
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun config:set web/unsecure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun config:set web/secure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun cache:clean
	fi
}

function installMagento {
	echo -e "\n"

	if [ "$MVERSION" -eq "2" ]; then

		read -p "Admin Username: " ADM_USER
		read -p "Admin Password: " ADM_PWD
		read -p "Admin First Name: " ADM_FNAME
		read -p "Admin Last Name: " ADM_LNAME
		read -p "Admin Email: " ADM_EMAIL

		if [ ! -f ${PROJECT_PATH}/bin/magento ]; then
			
			echo -e "\n"
			rm -rf _src

			read -p "Version Number [2.2.0]: " M2_VERSIONNUM
			docker exec --user www-data -ti $CONTAINER_NAME composer create-project ${REPO_M2}:${M2_VERSIONNUM} _src

			rsync -az --ignore-existing _src/* ./
			rm -rf _src
			
		fi

		docker exec --user www-data -ti $CONTAINER_NAME php bin/magento setup:install \
			--db-host="$DB_IPADDRESS" \
			--db-user="root" \
			--db-password="$MYSQL_ROOT_PASSWORD" \
			--db-name="$DBNAME" \
			--admin-user="$ADM_USER" \
			--admin-password="$ADM_PWD" \
			--admin-firstname="$ADM_FNAME" \
			--admin-lastname="$ADM_LNAME" \
			--admin-email="$ADM_EMAIL" \
			--base-url="$BASE_URL" \
			--use-rewrites=1
		
	fi
}

function installDB {
	if [ $IS_DOCKERIZED -eq 0 ]; then

		read -p "Create database? (Drop if exists) [Y/n]: " CREATEDB	
		if [ "$CREATEDB" = "Y" ]; then

			read -p "DB Name?: " DBNAME
			if [ -z ${DBNAME} ]; then
			  echo "You need to specify a database name"
			  exit 1
			fi

			createMysql
			createDatabase

			echo -e "\n"
			read -p "Import database? [Y/n]: " IMPORTDB
			if [ "$IMPORTDB" = "Y" ]; then

				echo -e "${BLUE}\n-------------------------------------${NC}"
				echo -e "${BLUE}Import Database:${NC}"
				echo -e"${BLUE}-------------------------------------${NC}"

				read -p "SQL Filename (Must be placed in ${PROJECT_PATH})?: " SQLNAME

				if [ ! -f ${PROJECT_PATH}/${SQLNAME} ]; then
			  	  echo "${PROJECT_PATH}/${SQLNAME} File not found!"
			  	  exit 1
				fi

				createConfigFile
				importDatabase
			else
				
				if [ "$MVERSION" -eq "2" ]; then
					read -p "Install Magento? [Y/n]: " INSTALLMAGE
					if [ "$INSTALLMAGE" = "Y" ]; then
						installMagento
					fi
				fi
			fi
		else
			CREATEDB=0
		fi

		addHost

		finish
	fi
}
function addHost {
	echo -e "${BLUE}\n-------------------------------------${NC}"
	echo -e "${BLUE}Adding Host Entry:${NC}"
	echo -e "${BLUE}-------------------------------------${NC}"
	echo -e "${BLUE}This operation needs super privileges${NC}"
    HOSTS_LINE="$IP $HOST_NAME"
    sudo sed -i "" "/$HOST_NAME/d" $ETC_HOSTS
    sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts"
}

function finish {
	DOCKERIZED_DATA="{\"HOST_NAME\":\""$HOST_NAME"\",\"MVERSION\":\""$MVERSION"\",\"MAGE_TYPE\":\""$MAGE_TYPE"\"}"
	echo $DOCKERIZED_DATA > $PROJECT_PATH/.dockerized

	if [ -f $PROJECT_PATH/.gitignore ]; then
		sudo sed -i "" "/\/.dockerized/d" $PROJECT_PATH/.gitignore
		echo "/.dockerized" >> $PROJECT_PATH/.gitignore
	fi
}

function outputData {
	echo -e "${GREEN}\n-------------------------------------${NC}"
	echo -e "${GREEN}Magento IP Address: ${M2_IPADDRESS}${NC}"
	if [ ! $CREATEDB = 0 ]; then
		echo -e "${GREEN}MYSQL HOST: ${DB_IPADDRESS}${NC}"
		echo -e "${GREEN}MYSQL USER: root${NC}"
		echo -e "${GREEN}MYSQL PASS: ${MYSQL_ROOT_PASSWORD}${NC}"
	fi
	echo -e "${GREEN}-------------------------------------${NC}"
	echo -e "${GREEN}\nFrontend: ${BASE_URL}${NC}"
	echo -e "${GREEN}-------------------------------------${NC}"
}

function checkIsRunning {
    if [ -z $CONTAINER_NAME ]; then
    	echo -e "${RED}Project is not initialized/started${NC}"
    	exit 1
	fi
}

function usage {
  echo -e "Utility for controlling dockerized Magento projects\n"
  echo -e "Usage:\n\n  $SCRIPTNAME <action> <arguments...>"
  echo -e ""
  echo -e "Actions:\n"
  echo -e " " "${BLUE}install${NC}" "\t" "Install Magento and MySQL"
  echo -e " " "${GREEN}bash${NC}" "\t\t" "Connect to your docker container"
  echo -e ""
  echo -e " " "${GREEN}php${NC}" "\t\t" "Executes php cli within your project root"
  echo -e " " "${GREEN}composer${NC}" "\t" "Executes composer within your project root"
  echo -e " " "${GREEN}grunt${NC}" "\t" "Executes grunt-cli Utility within your project root"
  echo -e " " "${GREEN}gulp${NC}" "\t\t" "Executes gulp Utility within your project root"
  echo -e " " "${GREEN}npm${NC}" "\t\t" "Executes npm within your project root"
  echo ""
  echo -e " " "${GREEN}start${NC}" "\t" "Start the server and all of its components"
  echo -e " " "${GREEN}stop${NC}" "\t\t" "Stop the server"
  echo ""
}

######################################################
####		 User Interaction
######################################################


case "$1" in
    install)
    shift 1
    start
    installDB
    outputData
    ;;

    php)
    shift 1
    checkIsRunning
    docker exec --user www-data -ti $CONTAINER_NAME php $*
    ;;

    composer)
    shift 1
    checkIsRunning
    docker exec --user www-data -ti $CONTAINER_NAME composer $*
    ;;

    grunt)
    shift 1
    checkIsRunning
    docker exec --user www-data -ti $CONTAINER_NAME grunt $*
    ;;

    gulp)
    shift 1
    checkIsRunning
    docker exec --user www-data -ti $CONTAINER_NAME gulp $*
    ;;

    npm)
    shift 1
    checkIsRunning
    docker exec --user www-data -ti $CONTAINER_NAME npm $*
    ;;

    bash)
    shift 1
    checkIsRunning
    docker exec --user www-data -ti $CONTAINER_NAME bash
    ;;

    start)
    start
    outputData
    ;;

    stop)
    stop
    ;;

    *)
    usage
    ;;
esac

exit 0
