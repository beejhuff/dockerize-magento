#!/bin/sh


######################################################
####		 Functions
######################################################

function startIfExists {
	if [ ! $IS_DOCKERIZED -eq 0 ]; then
		HOSTNAME=$(cat .dockerized | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["HOSTNAME"]')
		MVERSION=$(cat .dockerized | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["MVERSION"]')
		MAGE_TYPE=$(cat .dockerized | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["MAGE_TYPE"]')

		echo "\nInitializing with existing configuration..."
	fi
}

function createMagento {
	# Stop and Remove existing container
	if [ "$(docker ps -a | grep ${CONTAINER_NAME})" ]; then
		docker stop $CONTAINER_NAME &>/dev/null
		docker rm $CONTAINER_NAME &>/dev/null
	fi

	if [ "$MVERSION" -eq "1" ]; then
		REPO=fsspencer/magento
	else
		REPO=fsspencer/magento2
	fi

	# Create and start container
	echo "\n-------------------------------------"
	echo "Container creation response:"
	echo "-------------------------------------"
	docker run -d --name $CONTAINER_NAME -v $PROJECT_PATH:/var/www/html -p $PORT:80 $REPO
	echo "\n"

	# Get container IP Address
	M2_IPADDRESS=$(docker inspect ${CONTAINER_NAME} | python -c 'import json,sys;obj=json.load(sys.stdin);print obj[0]["NetworkSettings"]["IPAddress"]')
	
}

function createConfigFile {
	echo "\nDownloading config file..."
	if [ "$MVERSION" -eq "2" ]; then
		CONFIG_FILE=$PROJECT_PATH/app/etc/env.php
		curl -k https://raw.githubusercontent.com/fsspencer/bash-docker-magento/master/config/m2/${MAGE_TYPE}/env.php > $CONFIG_FILE
	else
		CONFIG_FILE=$PROJECT_PATH/app/etc/local.xml
		curl -k https://raw.githubusercontent.com/fsspencer/bash-docker-magento/master/config/m1/local.xml.sample > $CONFIG_FILE
	fi

	echo "\n"
	read -p "Crypt [783eee839c0396cf398e07e218e89e0a]: " CRYPT
	if [ -z $CRYPT ]; then
		CRYPT="783eee839c0396cf398e07e218e89e0a"
	fi

	read -p "Backend Frontname [backend]: " BACKEND_FRONTNAME
	if [ -z $BACKEND_FRONTNAME ]; then
		BACKEND_FRONTNAME="backend"
	fi

	sed -i '' "s/CRYPT/${CRYPT}/1" $CONFIG_FILE
	sed -i '' "s/DB_HOST/${DB_IPADDRESS}/1" $CONFIG_FILE
	sed -i '' "s/DB_USER/root/1" $CONFIG_FILE
	sed -i '' "s/DB_PASSWORD/${MYSQL_ROOT_PASSWORD}/1" $CONFIG_FILE
	sed -i '' "s/DB_NAME/${DBNAME}/1" $CONFIG_FILE
	sed -i '' "s/BACKEND_FRONTNAME/backend/1" $CONFIG_FILE
}

function createMysql {
	# Stop and Remove existing container
	echo "\n-------------------------------------"
	echo "Mysql container response:"
	echo "-------------------------------------"
	if [ ! "$(docker ps -a | grep mysql)" ]; then
		# Create and start container
		docker stop $(docker ps | grep "3306/tcp")
		docker run -d -ti -e MYSQL_ROOT_PASSWORD="root" -p 3306:3306 --name mysql mysql
		MYSQL_ROOT_PASSWORD="root"
		echo "\n"
	else
		docker start mysql
		echo "\n"
		read -p "Mysql Root Password: " MYSQL_ROOT_PASSWORD
	fi

	# Get container IP Address
	DB_IPADDRESS=$(docker inspect mysql | python -c 'import json,sys;obj=json.load(sys.stdin);print obj[0]["NetworkSettings"]["IPAddress"]')
}


function createDatabase {
	docker exec -ti $CONTAINER_NAME mysql -h $DB_IPADDRESS -uroot -proot -e "DROP DATABASE IF EXISTS ${DBNAME}; CREATE DATABASE ${DBNAME};"
}


function importDatabase {
	echo "\nImporting sql file into database..."
	docker exec -ti $CONTAINER_NAME mysql -h $DB_IPADDRESS -uroot -proot -e "set @@global.show_compatibility_56=ON;"
	docker exec -ti $CONTAINER_NAME mysql -h $DB_IPADDRESS -uroot -proot -e "USE ${DBNAME}; SOURCE ${SQLNAME};"
	if [ "$MVERSION" -eq "2" ]; then
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun2.phar config:store:set web/unsecure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun2.phar config:store:set web/secure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun2.phar cache:clean
	else
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun config:set web/unsecure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun config:set web/secure/base_url $BASE_URL
		docker exec --user www-data -ti $CONTAINER_NAME n98-magerun cache:clean
	fi
}

function install {
	echo "\n"

	if [ "$MVERSION" -eq "2" ]; then

		read -p "Admin Username: " ADM_USER
		read -p "Admin Password: " ADM_PWD
		read -p "Admin First Name: " ADM_FNAME
		read -p "Admin Last Name: " ADM_LNAME
		read -p "Admin Email: " ADM_EMAIL

		if [ ! -f ${PROJECT_PATH}/bin/magento ]; then
			
			echo "\n"
			rm -rf _src

			read -p "Version Number [2.2.0]: " M2_VERSIONNUM
			docker exec --user www-data -ti $CONTAINER_NAME composer create-project ${REPO_M2}:${M2_VERSIONNUM} _src

			rsync -az --ignore-existing _src/* ./
			rm -rf _src
			
		fi

		docker exec --user www-data -ti $CONTAINER_NAME php bin/magento setup:install \
			--db-host="$DB_IPADDRESS" \
			--db-user="root" \
			--db-password="$MYSQL_ROOT_PASSWORD" \
			--db-name="$DBNAME" \
			--admin-user="$ADM_USER" \
			--admin-password="$ADM_PWD" \
			--admin-firstname="$ADM_FNAME" \
			--admin-lastname="$ADM_LNAME" \
			--admin-email="$ADM_EMAIL" \
			--base-url="$BASE_URL" \
			--use-rewrites=1
		
	fi
}

function addHost {
	echo "\n-------------------------------------"
	echo "Adding Host Entry:"
	echo "-------------------------------------"
	echo "This operation needs super privileges"
    HOSTS_LINE="$IP $HOSTNAME"
    sudo sed -i "" "/$HOSTNAME/d" $ETC_HOSTS
    sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts"
}

function finish {
	DOCKERIZED_DATA="{\"HOSTNAME\":\""$HOSTNAME"\",\"MVERSION\":\""$MVERSION"\",\"MAGE_TYPE\":\""$MAGE_TYPE"\"}"
	echo $DOCKERIZED_DATA > $PROJECT_PATH/.dockerized

	if [ -f $PROJECT_PATH/.gitignore ]; then
		echo "/.dockerized" >> $PROJECT_PATH/.gitignore
	fi
}

######################################################
####		 User Interaction
######################################################

ETC_HOSTS=/etc/hosts
IP="0.0.0.0"
HOSTNAME=$1
PORT=80
PROJECT_PATH=$(eval pwd)
IS_DOCKERIZED=$(eval [ ! -e .dockerized ]; echo $?)

startIfExists

echo "\n"

if [ -z $(eval command -v docker) ]; then
	"Docker is not installed"
	exit 1
fi

if [ -z $MVERSION ]; then
	read -p "Magento Version [1 or 2]: " MVERSION
	if [ -z "$MVERSION" ]; then
		MVERSION="2"
		echo "Selected Magento 2";
	fi
fi

if [ -z $MAGE_TYPE ]; then
	read -p "Magento Type [ce/ee]: " MAGE_TYPE
	if [ -z "$MAGE_TYPE" ]; then
		MAGE_TYPE="ce"
	fi
	if [ "$MAGE_TYPE" = "ee" ]; then
		REPO_M2="--repository-url=https://repo.magento.com/ magento/project-enterprise-edition"
	else
		REPO_M2="magento/community-edition"
	fi
fi

CONTAINER_NAME="magento${MVERSION}"

if [ -z "$HOSTNAME" ]; then
	read -p "Base URL [dev.local]: " HOSTNAME
	if [ -z "$HOSTNAME" ]; then
		HOSTNAME="dev.local"
	fi
fi
BASE_URL=http://${HOSTNAME}/

docker stop $(docker ps | grep "${PORT}/tcp") &> /dev/null

createMagento

if [ $IS_DOCKERIZED -eq 0 ]; then

	read -p "Create database? (Drop of exists) [Y/n]: " CREATEDB	
	if [ "$CREATEDB" = "Y" ]; then

		read -p "DB Name?: " DBNAME
		if [ -z ${DBNAME} ]; then
		  echo "You need to specify a database name"
		  exit 1
		fi

		createMysql
		createDatabase

		echo "\n"
		read -p "Import database? [Y/n]: " IMPORTDB
		if [ "$IMPORTDB" = "Y" ]; then

			echo "\n-------------------------------------"
			echo "Import Database:"
			echo "-------------------------------------"

			read -p "SQL Filename (Must be placed in ${PROJECT_PATH})?: " SQLNAME

			if [ ! -f ${PROJECT_PATH}/${SQLNAME} ]; then
		  	  echo "${PROJECT_PATH}/${SQLNAME} File not found!"
		  	  exit 1
			fi

			createConfigFile
			importDatabase
		else
			
			if [ "$MVERSION" -eq "2" ]; then
				read -p "Install Magento? [Y/n]: " INSTALLMAGE
				if [ "$INSTALLMAGE" = "Y" ]; then
					install
				fi
			fi
		fi
	else
		CREATEDB=0
	fi

	addHost

	finish
fi

######################################################
####		 User Output
######################################################

echo "\n-------------------------------------"
echo "Magento IP Address: ${M2_IPADDRESS}"
if [ ! $CREATEDB = 0 ]; then
	echo "MYSQL HOST: ${DB_IPADDRESS}"
	echo "MYSQL USER: root"
	echo "MYSQL PASS: ${MYSQL_ROOT_PASSWORD}"
fi
echo "-------------------------------------"
echo "\nFrontend: ${BASE_URL}"
echo "-------------------------------------"